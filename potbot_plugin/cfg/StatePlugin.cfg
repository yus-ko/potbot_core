#!/usr/bin/env python

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("enabled", bool_t, 0, "Whether to apply this plugin or not", True)
gen.add("footprint_clearing_enabled", bool_t, 0, "Whether to clear the robot's footprint of lethal obstacles", True)
gen.add("max_obstacle_height", double_t, 0, "The maximum height of any obstacle to be inserted into the costmap in meters.", 2, 0, 50)

cns = gen.enum([gen.const("KF", str_t, "Kalman Filter", "Use Kalman Filter"),
                gen.const("EKF", str_t, "Extended Kalman Filter", "Use Extended Kalman Filter"),
                gen.const("UKF", str_t, "Unscented Kalman Filter", "Use Unscented Kalman Filter")],
               "state_estimator names")
gen.add("state_estimator", str_t, 0, "Which name to use, KF, EKF, UKF", "Unscented Kalman Filter", edit_method=cns)

gen.add("apply_localmap_threshold_2d_size",             double_t, 0, "Filter for obstacle size", 1.5, 0, 10)
gen.add("max_estimated_linear_velocity",                double_t, 0, "Filter for estimated linear velocity", 1.0, 0, 10)
gen.add("max_estimated_angular_velocity",               double_t, 0, "Filter for estimated angular velocity", 2.0, 0, 10)
gen.add("prediction_time",                              double_t, 0, "Predicted end time based on estimated velocity", 2.0, 0, 10)

gen.add("kappa",               double_t, 0, "Parameter for ukf", 0, -10, 10)
gen.add("sigma_q",             double_t, 0, "Covariance of the observation model for ukf", 0.00001, 0, 0.001)
gen.add("sigma_r",             double_t, 0, "Covariance of the system model for ukf", 0.00001, 0, 0.001)
gen.add("sigma_p",             double_t, 0, "Covariance initial value for ukf", 1, 0, 100)

exit(gen.generate("potbot_plugin", "potbot_plugin", "StatePlugin"))
